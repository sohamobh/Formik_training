{"ast":null,"code":"var _jsxFileName = \"/home/webelight-047/Desktop/Soha/React-Training/React/Formik/src/components/Form.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useFormik } from \"formik\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialValues = {\n  //step-1: passing initial values, properties must match the form's name attribute\n  name: \"\",\n  email: \"\",\n  contact: \"\" //properties for initialvalues corresponds to the name of the individual fields\n\n};\n\nconst onSubmit = values => {\n  //autiomatically receives form state as its argument\n  console.log(\"form data\", values);\n};\n\nconst validate = values => {\n  //condition-1: function must return an object\n  //values.name, values.email and values .contact\n  //condition-1: keys should be equal to that of values object\n  //errors.name, errors.email and errors .contact\n  //condition-3: alues of these fields should be a string indicating the error message\n  //error.name=\"this field is required\"\n  let errors = {};\n\n  if (!values.name) {\n    errors.name = \"Required\";\n  }\n\n  if (!values.email) {\n    errors.email = \"Required\";\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = \"Invalid email format\";\n  }\n\n  if (!values.contact) {\n    errors.contact = \"Required\";\n  }\n\n  return errors;\n};\n\nfunction Form() {\n  _s();\n\n  const formik = useFormik({\n    //stage-1\n    initialValues,\n    //step-2: add onchange and value prop for each form field for tracking and it is where const formik comes into picture\n    onSubmit,\n    //stage-3\n    validate\n  }); //hook-it returns an object that contains properties and methods that helps us to manage form state\n  // console.log(\"form values\", formik.values)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formik.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        name: \"name\",\n        onChange: formik.handleChange //handlechange is the helper method to update the values's object\n        ,\n        value: formik.values.name //formik.value is an object that reflects the state of the form\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        name: \"email\",\n        onChange: formik.handleChange,\n        value: formik.values.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"contact\",\n        children: \"Contact Number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"contact\",\n        name: \"contact\",\n        onChange: formik.handleChange,\n        value: formik.values.contact\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Form, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n  return [useFormik];\n});\n\n_c = Form;\nexport default Form;\n/*stage-1  :- MANAGING THE FORM STATE\n    step-1: passing initial values, properties must match the form's name attribute\n    step-2: add onchange and value prop for each form field for tracking and it is where const formik comes into picture*/\n\n/*stage-2  :-  HANDLING  FORM SUBMISSION\n    step1-:  specify onsubmit handler on the form tag\n    step-2: revisit the object we passed in to the useformik hook*/\n\n/*Stage-3  :-  VALIDATION AND ERROR MESSAGES (every fields must be entered, if the email is a valid email format or no)\n    step-1: specify a peoperty validate\n    */\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/home/webelight-047/Desktop/Soha/React-Training/React/Formik/src/components/Form.js"],"names":["React","useFormik","initialValues","name","email","contact","onSubmit","values","console","log","validate","errors","test","Form","formik","handleSubmit","handleChange"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { useFormik } from \"formik\"\n\nconst initialValues = {\n    //step-1: passing initial values, properties must match the form's name attribute\n    name: \"\",\n    email: \"\",\n    contact: \"\", //properties for initialvalues corresponds to the name of the individual fields\n}\nconst onSubmit = (values) => {\n    //autiomatically receives form state as its argument\n    console.log(\"form data\", values)\n}\nconst validate = (values) => {\n    //condition-1: function must return an object\n    //values.name, values.email and values .contact\n    //condition-1: keys should be equal to that of values object\n    //errors.name, errors.email and errors .contact\n    //condition-3: alues of these fields should be a string indicating the error message\n    //error.name=\"this field is required\"\n    let errors = {}\n    if (!values.name) {\n        errors.name = \"Required\"\n    }\n    if (!values.email) {\n        errors.email = \"Required\"\n    } else if (\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n    ) {\n        errors.email = \"Invalid email format\"\n    }\n    if (!values.contact) {\n        errors.contact = \"Required\"\n    }\n    return errors\n}\n\nfunction Form() {\n    const formik = useFormik({\n        //stage-1\n        initialValues,\n        //step-2: add onchange and value prop for each form field for tracking and it is where const formik comes into picture\n        onSubmit,\n        //stage-3\n        validate,\n    }) //hook-it returns an object that contains properties and methods that helps us to manage form state\n    // console.log(\"form values\", formik.values)\n    return (\n        <div>\n            {/*Stage-2*/}\n            <form onSubmit={formik.handleSubmit}>\n                {/*Step-1 : handleformsubmit is a helper method given by formik*/}\n                <label htmlFor=\"name\">Name</label>\n                <input\n                    type=\"text\"\n                    id=\"name\"\n                    name=\"name\"\n                    onChange={formik.handleChange} //handlechange is the helper method to update the values's object\n                    value={formik.values.name} //formik.value is an object that reflects the state of the form\n                />\n                <label htmlFor=\"email\">Email</label>\n                <input\n                    type=\"email\"\n                    id=\"email\"\n                    name=\"email\"\n                    onChange={formik.handleChange}\n                    value={formik.values.email}\n                />\n                <label htmlFor=\"contact\">Contact Number</label>\n                <input\n                    type=\"text\"\n                    id=\"contact\"\n                    name=\"contact\"\n                    onChange={formik.handleChange}\n                    value={formik.values.contact}\n                />\n                <button type=\"submit\">Submit</button>\n            </form>\n        </div>\n    )\n}\n\nexport default Form\n/*stage-1  :- MANAGING THE FORM STATE\n    step-1: passing initial values, properties must match the form's name attribute\n    step-2: add onchange and value prop for each form field for tracking and it is where const formik comes into picture*/\n\n/*stage-2  :-  HANDLING  FORM SUBMISSION\n    step1-:  specify onsubmit handler on the form tag\n    step-2: revisit the object we passed in to the useformik hook*/\n\n/*Stage-3  :-  VALIDATION AND ERROR MESSAGES (every fields must be entered, if the email is a valid email format or no)\n    step-1: specify a peoperty validate\n    */\n"]},"metadata":{},"sourceType":"module"}