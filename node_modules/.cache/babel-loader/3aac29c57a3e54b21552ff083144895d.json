{"ast":null,"code":"var _jsxFileName = \"/home/webelight-047/Desktop/Soha/React-Training/React/Formik/src/components/Form.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst onSubmit = values => {\n  //autiomatically receives form state as its argument\n  alert(JSON.stringify(values, null, 2));\n}; // const validate = (values) => {\n//     // condition-1: function must return an object\n//     // values.name, values.email and values .contact\n//     // condition-1: keys should be equal to that of values object\n//     // errors.name, errors.email and errors .contact\n//     // condition-3: alues of these fields should be a string indicating the error message\n//     // error.name=\"this field is required\"\n//     let errors = {}\n//     if (!values.name) {\n//         errors.name = \"Required\"\n//     }\n//     if (!values.email) {\n//         errors.email = \"Required\"\n//     } else if (\n//         !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n//     ) {\n//         errors.email = \"Invalid email format\"\n//     }\n//     if (!values.contact) {\n//         errors.contact = \"Required\"\n//     } else if (values.contact.length < 10 || values.contact.length > 10) {\n//         errors.contact = \"Contact number must have 10 digits only\"\n//     }\n//     return errors\n// }\n\n\nfunction Form() {\n  _s();\n\n  const formik = useFormik({\n    //stage-1\n    initialValues: {\n      //step-1: passing initial values, properties must match the form's name attribute\n      name: \"\",\n      email: \"\",\n      contact: \"\" //properties for initialvalues corresponds to the name of the individual fields\n\n    },\n    //step-2: add onchange and value prop for each form field for tracking and it is where const formik comes into picture\n    onSubmit,\n    //stage-3\n    validationSchema: Yup.object({\n      name: Yup.string().max(15, \"Name should be 15 characters or less\").required(\"Required\"),\n      email: Yup.string().email(\"Invalid email format\").required(\"Required\"),\n      contact: Yup.number().max(10, \"Contact number must have 10 digits only\").min(10, \"Contact number must have 10 digits only\").required(\"Required\")\n    }) //hook-it returns an object that contains properties and methods that helps us to manage form state\n    // console.log(\"form values\", formik.values)\n\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formik.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        name: \"name\",\n        onBlur: formik.handleBlur,\n        onChange: formik.handleChange //handlechange is the helper method to update the values's object\n        ,\n        value: formik.values.name //formik.value is an object that reflects the state of the form\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), formik.touched.name && formik.errors.name ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: formik.errors.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        name: \"email\",\n        onBlur: formik.handleBlur,\n        onChange: formik.handleChange,\n        value: formik.values.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), formik.touched.email && formik.errors.email ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: formik.errors.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"contact\",\n        children: \"Contact Number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"contact\",\n        name: \"contact\",\n        onBlur: formik.handleBlur,\n        onChange: formik.handleChange,\n        value: formik.values.contact\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), formik.touched.contact && formik.errors.contact ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: formik.errors.contact\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Form, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n  return [useFormik];\n});\n\n_c = Form;\nexport default Form;\n/*stage-1  :- MANAGING THE FORM STATE\n    step-1: passing initial values, properties must match the form's name attribute\n    step-2: add onchange and value prop for each form field for tracking and it is where const formik comes into picture*/\n\n/*stage-2  :-  HANDLING  FORM SUBMISSION\n    step1-:  specify onsubmit handler on the form tag\n    step-2: revisit the object we passed in to the useformik hook*/\n\n/*Stage-3  :-  VALIDATION AND ERROR MESSAGES (every fields must be entered, if the email is a valid email format or no)\n    step-1: specify a peoperty validate\n    */\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/home/webelight-047/Desktop/Soha/React-Training/React/Formik/src/components/Form.js"],"names":["React","useFormik","Yup","onSubmit","values","alert","JSON","stringify","Form","formik","initialValues","name","email","contact","validationSchema","object","string","max","required","number","min","handleSubmit","handleBlur","handleChange","touched","errors"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { useFormik } from \"formik\"\nimport * as Yup from \"yup\"\n\nconst onSubmit = (values) => {\n    //autiomatically receives form state as its argument\n    alert(JSON.stringify(values, null, 2))\n}\n\n// const validate = (values) => {\n//     // condition-1: function must return an object\n//     // values.name, values.email and values .contact\n//     // condition-1: keys should be equal to that of values object\n//     // errors.name, errors.email and errors .contact\n//     // condition-3: alues of these fields should be a string indicating the error message\n//     // error.name=\"this field is required\"\n//     let errors = {}\n//     if (!values.name) {\n//         errors.name = \"Required\"\n//     }\n//     if (!values.email) {\n//         errors.email = \"Required\"\n//     } else if (\n//         !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n//     ) {\n//         errors.email = \"Invalid email format\"\n//     }\n//     if (!values.contact) {\n//         errors.contact = \"Required\"\n//     } else if (values.contact.length < 10 || values.contact.length > 10) {\n//         errors.contact = \"Contact number must have 10 digits only\"\n//     }\n//     return errors\n// }\n\nfunction Form() {\n    const formik = useFormik({\n        //stage-1\n        initialValues: {\n            //step-1: passing initial values, properties must match the form's name attribute\n            name: \"\",\n            email: \"\",\n            contact: \"\", //properties for initialvalues corresponds to the name of the individual fields\n        },\n        //step-2: add onchange and value prop for each form field for tracking and it is where const formik comes into picture\n        onSubmit,\n        //stage-3\n        validationSchema: Yup.object({\n            name: Yup.string()\n                .max(15, \"Name should be 15 characters or less\")\n                .required(\"Required\"),\n            email: Yup.string()\n                .email(\"Invalid email format\")\n                .required(\"Required\"),\n            contact: Yup.number()\n                .max(10, \"Contact number must have 10 digits only\")\n                .min(10, \"Contact number must have 10 digits only\")\n                .required(\"Required\"),\n        }), //hook-it returns an object that contains properties and methods that helps us to manage form state\n        // console.log(\"form values\", formik.values)\n    })\n    return (\n        <div>\n            {/*Stage-2*/}\n            <form onSubmit={formik.handleSubmit}>\n                {/*Step-1 : handleformsubmit is a helper method given by formik*/}\n                <label htmlFor=\"name\">Name</label>\n                <input\n                    type=\"text\"\n                    id=\"name\"\n                    name=\"name\"\n                    onBlur={formik.handleBlur}\n                    onChange={formik.handleChange} //handlechange is the helper method to update the values's object\n                    value={formik.values.name} //formik.value is an object that reflects the state of the form\n                />\n                {formik.touched.name && formik.errors.name ? (\n                    <div>{formik.errors.name}</div>\n                ) : null}\n                <label htmlFor=\"email\">Email</label>\n                <input\n                    type=\"email\"\n                    id=\"email\"\n                    name=\"email\"\n                    onBlur={formik.handleBlur}\n                    onChange={formik.handleChange}\n                    value={formik.values.email}\n                />\n                {formik.touched.email && formik.errors.email ? (\n                    <div>{formik.errors.email}</div>\n                ) : null}\n                <label htmlFor=\"contact\">Contact Number</label>\n                <input\n                    type=\"text\"\n                    id=\"contact\"\n                    name=\"contact\"\n                    onBlur={formik.handleBlur}\n                    onChange={formik.handleChange}\n                    value={formik.values.contact}\n                />\n                {formik.touched.contact && formik.errors.contact ? (\n                    <div>{formik.errors.contact}</div>\n                ) : null}\n\n                <button type=\"submit\">Submit</button>\n            </form>\n        </div>\n    )\n}\n\nexport default Form\n/*stage-1  :- MANAGING THE FORM STATE\n    step-1: passing initial values, properties must match the form's name attribute\n    step-2: add onchange and value prop for each form field for tracking and it is where const formik comes into picture*/\n\n/*stage-2  :-  HANDLING  FORM SUBMISSION\n    step1-:  specify onsubmit handler on the form tag\n    step-2: revisit the object we passed in to the useformik hook*/\n\n/*Stage-3  :-  VALIDATION AND ERROR MESSAGES (every fields must be entered, if the email is a valid email format or no)\n    step-1: specify a peoperty validate\n    */\n"]},"metadata":{},"sourceType":"module"}