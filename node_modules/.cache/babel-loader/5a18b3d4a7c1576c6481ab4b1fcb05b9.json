{"ast":null,"code":"var _jsxFileName = \"/home/webelight-047/Desktop/Soha/React-Training/React/Formik/src/components/Form.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useFormik } from \"formik\";\nimport { AlertDescription } from \"@chakra-ui/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialValues = {\n  //step-1: passing initial values, properties must match the form's name attribute\n  name: \"\",\n  email: \"\",\n  contact: \"\" //properties for initialvalues corresponds to the name of the individual fields\n\n};\n\nconst onSubmit = values => {\n  //autiomatically receives form state as its argument\n  alert(JSON.stringify(values, null, 2));\n};\n\nconst validate = values => {\n  //condition-1: function must return an object\n  //values.name, values.email and values .contact\n  //condition-1: keys should be equal to that of values object\n  //errors.name, errors.email and errors .contact\n  //condition-3: alues of these fields should be a string indicating the error message\n  //error.name=\"this field is required\"\n  let errors = {};\n\n  if (!values.name) {\n    errors.name = \"Required\";\n  }\n\n  if (!values.email) {\n    errors.email = \"Required\";\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = \"Invalid email format\";\n  }\n\n  if (!values.contact) {\n    errors.contact = \"Required\";\n  } else if (values.contact.length < 10 || values.contact.length > 10) {\n    errors.contact = \"Contact number must have 10 digits only\";\n  }\n\n  return errors;\n};\n\nfunction Form() {\n  _s();\n\n  const formik = useFormik({\n    //stage-1\n    initialValues,\n    //step-2: add onchange and value prop for each form field for tracking and it is where const formik comes into picture\n    onSubmit,\n    //stage-3\n    validate\n  }); //hook-it returns an object that contains properties and methods that helps us to manage form state\n  // console.log(\"form values\", formik.values)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formik.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        name: \"name\",\n        onBlur: formik.handleBlur,\n        onChange: formik.handleChange //handlechange is the helper method to update the values's object\n        ,\n        value: formik.values.name //formik.value is an object that reflects the state of the form\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), formik.touched.name && formik.errors.name ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: formik.errors.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        name: \"email\",\n        onBlur: formik.handleBlur,\n        onChange: formik.handleChange,\n        value: formik.values.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), formik.touched.email && formik.errors.email ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: formik.errors.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"contact\",\n        children: \"Contact Number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"contact\",\n        name: \"contact\",\n        onBlur: formik.handleBlur,\n        onChange: formik.handleChange,\n        value: formik.values.contact\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), formik.touched.contact && formik.errors.contact ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: formik.errors.contact\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Form, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n  return [useFormik];\n});\n\n_c = Form;\nexport default Form;\n/*stage-1  :- MANAGING THE FORM STATE\n    step-1: passing initial values, properties must match the form's name attribute\n    step-2: add onchange and value prop for each form field for tracking and it is where const formik comes into picture*/\n\n/*stage-2  :-  HANDLING  FORM SUBMISSION\n    step1-:  specify onsubmit handler on the form tag\n    step-2: revisit the object we passed in to the useformik hook*/\n\n/*Stage-3  :-  VALIDATION AND ERROR MESSAGES (every fields must be entered, if the email is a valid email format or no)\n    step-1: specify a peoperty validate\n    */\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/home/webelight-047/Desktop/Soha/React-Training/React/Formik/src/components/Form.js"],"names":["React","useFormik","AlertDescription","initialValues","name","email","contact","onSubmit","values","alert","JSON","stringify","validate","errors","test","length","Form","formik","handleSubmit","handleBlur","handleChange","touched"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,SAASC,gBAAT,QAAiC,kBAAjC;;AAEA,MAAMC,aAAa,GAAG;AAClB;AACAC,EAAAA,IAAI,EAAE,EAFY;AAGlBC,EAAAA,KAAK,EAAE,EAHW;AAIlBC,EAAAA,OAAO,EAAE,EAJS,CAIL;;AAJK,CAAtB;;AAMA,MAAMC,QAAQ,GAAIC,MAAD,IAAY;AACzB;AACAC,EAAAA,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeH,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAD,CAAL;AACH,CAHD;;AAIA,MAAMI,QAAQ,GAAIJ,MAAD,IAAY;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,MAAIK,MAAM,GAAG,EAAb;;AACA,MAAI,CAACL,MAAM,CAACJ,IAAZ,EAAkB;AACdS,IAAAA,MAAM,CAACT,IAAP,GAAc,UAAd;AACH;;AACD,MAAI,CAACI,MAAM,CAACH,KAAZ,EAAmB;AACfQ,IAAAA,MAAM,CAACR,KAAP,GAAe,UAAf;AACH,GAFD,MAEO,IACH,CAAC,4CAA4CS,IAA5C,CAAiDN,MAAM,CAACH,KAAxD,CADE,EAEL;AACEQ,IAAAA,MAAM,CAACR,KAAP,GAAe,sBAAf;AACH;;AACD,MAAI,CAACG,MAAM,CAACF,OAAZ,EAAqB;AACjBO,IAAAA,MAAM,CAACP,OAAP,GAAiB,UAAjB;AACH,GAFD,MAEO,IAAIE,MAAM,CAACF,OAAP,CAAeS,MAAf,GAAwB,EAAxB,IAA8BP,MAAM,CAACF,OAAP,CAAeS,MAAf,GAAwB,EAA1D,EAA8D;AACjEF,IAAAA,MAAM,CAACP,OAAP,GAAiB,yCAAjB;AACH;;AACD,SAAOO,MAAP;AACH,CAxBD;;AA0BA,SAASG,IAAT,GAAgB;AAAA;;AACZ,QAAMC,MAAM,GAAGhB,SAAS,CAAC;AACrB;AACAE,IAAAA,aAFqB;AAGrB;AACAI,IAAAA,QAJqB;AAKrB;AACAK,IAAAA;AANqB,GAAD,CAAxB,CADY,CAQT;AACH;;AACA,sBACI;AAAA,2BAEI;AAAM,MAAA,QAAQ,EAAEK,MAAM,CAACC,YAAvB;AAAA,8BAEI;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,EAAE,EAAC,MAFP;AAGI,QAAA,IAAI,EAAC,MAHT;AAII,QAAA,MAAM,EAAED,MAAM,CAACE,UAJnB;AAKI,QAAA,QAAQ,EAAEF,MAAM,CAACG,YALrB,CAKmC;AALnC;AAMI,QAAA,KAAK,EAAEH,MAAM,CAACT,MAAP,CAAcJ,IANzB,CAM+B;;AAN/B;AAAA;AAAA;AAAA;AAAA,cAHJ,EAWKa,MAAM,CAACI,OAAP,CAAejB,IAAf,IAAuBa,MAAM,CAACJ,MAAP,CAAcT,IAArC,gBACG;AAAA,kBAAMa,MAAM,CAACJ,MAAP,CAAcT;AAApB;AAAA;AAAA;AAAA;AAAA,cADH,GAEG,IAbR,eAcI;AAAO,QAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAdJ,eAeI;AACI,QAAA,IAAI,EAAC,OADT;AAEI,QAAA,EAAE,EAAC,OAFP;AAGI,QAAA,IAAI,EAAC,OAHT;AAII,QAAA,MAAM,EAAEa,MAAM,CAACE,UAJnB;AAKI,QAAA,QAAQ,EAAEF,MAAM,CAACG,YALrB;AAMI,QAAA,KAAK,EAAEH,MAAM,CAACT,MAAP,CAAcH;AANzB;AAAA;AAAA;AAAA;AAAA,cAfJ,EAuBKY,MAAM,CAACI,OAAP,CAAehB,KAAf,IAAwBY,MAAM,CAACJ,MAAP,CAAcR,KAAtC,gBACG;AAAA,kBAAMY,MAAM,CAACJ,MAAP,CAAcR;AAApB;AAAA;AAAA;AAAA;AAAA,cADH,GAEG,IAzBR,eA0BI;AAAO,QAAA,OAAO,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA1BJ,eA2BI;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,EAAE,EAAC,SAFP;AAGI,QAAA,IAAI,EAAC,SAHT;AAII,QAAA,MAAM,EAAEY,MAAM,CAACE,UAJnB;AAKI,QAAA,QAAQ,EAAEF,MAAM,CAACG,YALrB;AAMI,QAAA,KAAK,EAAEH,MAAM,CAACT,MAAP,CAAcF;AANzB;AAAA;AAAA;AAAA;AAAA,cA3BJ,EAmCKW,MAAM,CAACI,OAAP,CAAef,OAAf,IAA0BW,MAAM,CAACJ,MAAP,CAAcP,OAAxC,gBACG;AAAA,kBAAMW,MAAM,CAACJ,MAAP,CAAcP;AAApB;AAAA;AAAA;AAAA;AAAA,cADH,GAEG,IArCR,eAuCI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAvCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,UADJ;AA8CH;;GAxDQU,I;UACUf,S;;;KADVe,I;AA0DT,eAAeA,IAAf;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","sourcesContent":["import React from \"react\"\nimport { useFormik } from \"formik\"\nimport { AlertDescription } from \"@chakra-ui/react\"\n\nconst initialValues = {\n    //step-1: passing initial values, properties must match the form's name attribute\n    name: \"\",\n    email: \"\",\n    contact: \"\", //properties for initialvalues corresponds to the name of the individual fields\n}\nconst onSubmit = (values) => {\n    //autiomatically receives form state as its argument\n    alert(JSON.stringify(values, null, 2))\n}\nconst validate = (values) => {\n    //condition-1: function must return an object\n    //values.name, values.email and values .contact\n    //condition-1: keys should be equal to that of values object\n    //errors.name, errors.email and errors .contact\n    //condition-3: alues of these fields should be a string indicating the error message\n    //error.name=\"this field is required\"\n    let errors = {}\n    if (!values.name) {\n        errors.name = \"Required\"\n    }\n    if (!values.email) {\n        errors.email = \"Required\"\n    } else if (\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n    ) {\n        errors.email = \"Invalid email format\"\n    }\n    if (!values.contact) {\n        errors.contact = \"Required\"\n    } else if (values.contact.length < 10 || values.contact.length > 10) {\n        errors.contact = \"Contact number must have 10 digits only\"\n    }\n    return errors\n}\n\nfunction Form() {\n    const formik = useFormik({\n        //stage-1\n        initialValues,\n        //step-2: add onchange and value prop for each form field for tracking and it is where const formik comes into picture\n        onSubmit,\n        //stage-3\n        validate,\n    }) //hook-it returns an object that contains properties and methods that helps us to manage form state\n    // console.log(\"form values\", formik.values)\n    return (\n        <div>\n            {/*Stage-2*/}\n            <form onSubmit={formik.handleSubmit}>\n                {/*Step-1 : handleformsubmit is a helper method given by formik*/}\n                <label htmlFor=\"name\">Name</label>\n                <input\n                    type=\"text\"\n                    id=\"name\"\n                    name=\"name\"\n                    onBlur={formik.handleBlur}\n                    onChange={formik.handleChange} //handlechange is the helper method to update the values's object\n                    value={formik.values.name} //formik.value is an object that reflects the state of the form\n                />\n                {formik.touched.name && formik.errors.name ? (\n                    <div>{formik.errors.name}</div>\n                ) : null}\n                <label htmlFor=\"email\">Email</label>\n                <input\n                    type=\"email\"\n                    id=\"email\"\n                    name=\"email\"\n                    onBlur={formik.handleBlur}\n                    onChange={formik.handleChange}\n                    value={formik.values.email}\n                />\n                {formik.touched.email && formik.errors.email ? (\n                    <div>{formik.errors.email}</div>\n                ) : null}\n                <label htmlFor=\"contact\">Contact Number</label>\n                <input\n                    type=\"text\"\n                    id=\"contact\"\n                    name=\"contact\"\n                    onBlur={formik.handleBlur}\n                    onChange={formik.handleChange}\n                    value={formik.values.contact}\n                />\n                {formik.touched.contact && formik.errors.contact ? (\n                    <div>{formik.errors.contact}</div>\n                ) : null}\n\n                <button type=\"submit\">Submit</button>\n            </form>\n        </div>\n    )\n}\n\nexport default Form\n/*stage-1  :- MANAGING THE FORM STATE\n    step-1: passing initial values, properties must match the form's name attribute\n    step-2: add onchange and value prop for each form field for tracking and it is where const formik comes into picture*/\n\n/*stage-2  :-  HANDLING  FORM SUBMISSION\n    step1-:  specify onsubmit handler on the form tag\n    step-2: revisit the object we passed in to the useformik hook*/\n\n/*Stage-3  :-  VALIDATION AND ERROR MESSAGES (every fields must be entered, if the email is a valid email format or no)\n    step-1: specify a peoperty validate\n    */\n"]},"metadata":{},"sourceType":"module"}